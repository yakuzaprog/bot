from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import logging
from datetime import datetime, timedelta

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, TIME = range(3)

# –ü–∞–º—è—Ç—å –æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–∞—Ö (–≤ –∏–¥–µ–∞–ª–µ ‚Äî –≤ —Ñ–∞–π–ª/–ë–î)
booked_slots = []

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
def generate_available_slots():
    now = datetime.now()
    base_date = now.date()

    if now.hour >= 18:
        base_date += timedelta(days=1)

    slots = []
    for hour in range(10, 18):
        slot_time = datetime(base_date.year, base_date.month, base_date.day, hour)
        slot_str = slot_time.strftime("%d.%m.%Y %H:%M")
        if slot_str not in booked_slots:
            slots.append(slot_str)

    # –µ—Å–ª–∏ –≤—Å–µ –∑–∞–Ω—è—Ç–æ ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    if not slots:
        base_date += timedelta(days=1)
        for hour in range(10, 18):
            slot_time = datetime(base_date.year, base_date.month, base_date.day, hour)
            slot_str = slot_time.strftime("%d.%m.%Y %H:%M")
            if slot_str not in booked_slots:
                slots.append(slot_str)

    return slots

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
def is_valid_time(time_str):
    try:
        datetime.strptime(time_str, "%d.%m.%Y %H:%M")
        return True
    except ValueError:
        return False

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
    return NAME

# –ò–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

# –¢–µ–ª–µ—Ñ–æ–Ω
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text.strip()

    available_slots = generate_available_slots()
    if not available_slots:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    keyboard = [available_slots[i:i+2] for i in range(0, len(available_slots), 2)]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=reply_markup)
    return TIME

# –í—Ä–µ–º—è
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_time = update.message.text.strip()

    if not is_valid_time(selected_time):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
        return TIME

    if selected_time in booked_slots:
        await update.message.reply_text("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return TIME

    booked_slots.append(selected_time)
    context.user_data["time"] = selected_time

    name = context.user_data["name"]
    phone = context.user_data["phone"]

    admin_chat_id = "889342057"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

    message = (
        f"üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n"
        f"üë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüïì –í—Ä–µ–º—è: {selected_time}"
    )

    await context.bot.send_message(chat_id=admin_chat_id, text=message)
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –Ω–∞–∂–º–∏ /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # ‚Üê –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token("8080491480:AAGKkb3dRshthxmwv1meYaK7X7PK1kP7NOs").build()

    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram
    await application.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"),
    ])

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("cancel", cancel))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
